import { env } from "~/env.js";

interface TelegramMessage {
	chat_id: number | string;
	text: string;
	parse_mode?: "HTML" | "Markdown" | "MarkdownV2";
	reply_markup?: {
		inline_keyboard?: Array<
			Array<{
				text: string;
				url?: string;
				callback_data?: string;
			}>
		>;
	};
}

export class TelegramNotifications {
	private static readonly BOT_TOKEN = env.TELEGRAM_BOT_TOKEN;
	private static readonly API_URL =
		`https://api.telegram.org/bot${TelegramNotifications.BOT_TOKEN}`;

	static async sendMessage(message: TelegramMessage): Promise<boolean> {
		if (!TelegramNotifications.BOT_TOKEN) {
			console.error("Telegram bot token not configured");
			return false;
		}

		try {
			const response = await fetch(
				`${TelegramNotifications.API_URL}/sendMessage`,
				{
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify(message),
				},
			);

			if (!response.ok) {
				const errorData = await response.text();
				console.error("Failed to send Telegram message:", errorData);
				return false;
			}

			return true;
		} catch (error) {
			console.error("Error sending Telegram message:", error);
			return false;
		}
	}

	static async notifyPluginApproved(
		chatId: number | string,
		pluginName: string,
		pluginSlug: string,
		authorName: string,
	): Promise<boolean> {
		const baseUrl = env.NEXTAUTH_URL || "http://localhost:3000";

		const message: TelegramMessage = {
			chat_id: chatId,
			text: `üéâ *–í–∞—à –ø–ª–∞–≥–∏–Ω –æ–¥–æ–±—Ä–µ–Ω!*\n\nüì¶ –ü–ª–∞–≥–∏–Ω: *${pluginName}*\nüë®‚Äçüíª –ê–≤—Ç–æ—Ä: ${authorName}\n\n‚úÖ –í–∞—à –ø–ª–∞–≥–∏–Ω –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ exteraStore!\n\nüåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å –≤–∞—à –ø–ª–∞–≥–∏–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.`,
			parse_mode: "Markdown",
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–≥–∏–Ω",
							url: `${baseUrl}/plugins/${pluginSlug}`,
						},
					],
					[
						{
							text: "üåê –ö–∞—Ç–∞–ª–æ–≥ –ø–ª–∞–≥–∏–Ω–æ–≤",
							url: `${baseUrl}/plugins`,
						},
						{
							text: "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞–º–∏",
							url: `${baseUrl}/my-plugins`,
						},
					],
				],
			},
		};

		return TelegramNotifications.sendMessage(message);
	}

	static async notifyPluginRejected(
		chatId: number | string,
		pluginName: string,
		authorName: string,
		reason?: string,
	): Promise<boolean> {
		const baseUrl = env.NEXTAUTH_URL || "http://localhost:3000";

		const reasonText = reason ? `\n\nüìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}` : "";

		const message: TelegramMessage = {
			chat_id: chatId,
			text: `‚ùå *–ü–ª–∞–≥–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\nüì¶ –ü–ª–∞–≥–∏–Ω: *${pluginName}*\nüë®‚Äçüíª –ê–≤—Ç–æ—Ä: ${authorName}${reasonText}\n\nüîÑ –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–≥–∏–Ω –∑–∞–Ω–æ–≤–æ.\n\nüí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã.`,
			parse_mode: "Markdown",
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω",
							url: `${baseUrl}/upload`,
						},
					],
					[
						{
							text: "‚öôÔ∏è –ú–æ–∏ –ø–ª–∞–≥–∏–Ω—ã",
							url: `${baseUrl}/my-plugins`,
						},
					],
				],
			},
		};

		return TelegramNotifications.sendMessage(message);
	}
}
