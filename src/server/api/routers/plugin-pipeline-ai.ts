import { Document } from "@langchain/core/documents";
import { HumanMessage, SystemMessage } from "@langchain/core/messages";
import { ChatOpenAI } from "@langchain/openai";
import { RecursiveCharacterTextSplitter } from "@langchain/textsplitters";
import { z } from "zod";

const CheckResultSchema = z.object({
	status: z.enum(["safe", "warning", "danger"]),
	classification: z.enum(["safe", "potentially_unsafe", "unsafe", "critical"]),
	shortDescription: z.string().max(200),
	issues: z.array(
		z.object({
			type: z.string(),
			severity: z.enum(["low", "medium", "high", "critical"]),
			description: z.string(),
			recommendation: z.string(),
		}),
	),
});

const AICollectionResultSchema = z.object({
	collectionName: z.string(),
	collectionDescription: z.string(),
	pluginIds: z.array(z.number()),
});

type CheckResult = z.infer<typeof CheckResultSchema>;
type AICollectionResult = z.infer<typeof AICollectionResultSchema>;

export class PluginAIChecker {
	private gemini: ChatOpenAI;
	private textSplitter: RecursiveCharacterTextSplitter;

	constructor() {
		const openRouterApiKey =
			process.env.OPENROUTER_API_KEY || process.env.OPENAI_API_KEY;

		console.log(
			"[PluginAIChecker] Initializing with API key:",
			openRouterApiKey ? "‚úì Found" : "‚úó Missing",
		);
		console.log("[PluginAIChecker] Using model: google/gemini-2.5-pro");
		console.log("[PluginAIChecker] Base URL:", "https://openrouter.ai/api/v1");

		this.gemini = new ChatOpenAI({
			modelName: "google/gemini-2.5-pro",
			temperature: 0.1,
			openAIApiKey: openRouterApiKey,
			configuration: {
				baseURL: "https://openrouter.ai/api/v1",
				defaultHeaders: {
					"HTTP-Referer": process.env.NEXTAUTH_URL || "https://exterastore.app",
					"X-Title": "exteraGram Plugin Store",
				},
			},
		});

		this.textSplitter = new RecursiveCharacterTextSplitter({
			chunkSize: 500000,
			chunkOverlap: 10000,
			separators: ["\nclass ", "\ndef ", "\n\n", "\n", " ", ""],
		});

		console.log("[PluginAIChecker] Initialized successfully");
	}

	private async splitLargeCode(code: string): Promise<Document[]> {
		console.log(`[PluginAIChecker] Code size: ${code.length} characters`);

		if (code.length < 1000000) {
			console.log(
				"[PluginAIChecker] Code is small enough, processing as single chunk",
			);
			return [new Document({ pageContent: code })];
		}

		console.log("[PluginAIChecker] Code is large, splitting into chunks...");
		const chunks = await this.textSplitter.createDocuments([code]);
		console.log(`[PluginAIChecker] Split into ${chunks.length} chunks`);
		chunks.forEach((chunk, index) => {
			console.log(
				`[PluginAIChecker] Chunk ${index + 1}: ${chunk.pageContent.length} characters`,
			);
		});

		return chunks;
	}

	private getSecurityPrompt(): string {
		return `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–ª–∞–≥–∏–Ω–æ–≤ ExteraGram. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –ö–†–ê–¢–ö–û –∏ —Ç–æ—á–Ω–æ.

–ë–ï–ó–û–ü–ê–°–ù–´–ï –ü–†–ê–ö–¢–ò–ö–ò ExteraGram (–ù–ï —Å—á–∏—Ç–∞–π —É–≥—Ä–æ–∑–æ–π):
‚Ä¢ client_utils: send_message, get_user, get_messages_controller
‚Ä¢ TLRPC –æ–±—ä–µ–∫—Ç—ã —á–µ—Ä–µ–∑ send_request
‚Ä¢ HookStrategy, HookResult –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–∑–æ–≤–æ–≤
‚Ä¢ AlertDialogBuilder, BulletinHelper –¥–ª—è UI
‚Ä¢ android_utils: runOnUIThread, addToClipboard
‚Ä¢ requests/http –∫ GitHub, –∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–æ–º–µ–Ω–∞–º
‚Ä¢ –§–∞–π–ª—ã –≤ /Download/[plugin_folder]/ –∏–ª–∏ –∫–µ—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

–ü–†–û–í–ï–†–Ø–ô:
üî¥ –ö–†–ò–¢–ò–ß–ù–û: eval(), exec(), os.system(), –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–æ–ª–µ–π/—Ç–æ–∫–µ–Ω–æ–≤
üü° –û–°–¢–û–†–û–ñ–ù–û: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ HTTP —Å–µ—Ä–≤–µ—Ä—ã, –¥–æ—Å—Ç—É–ø –∫ SMS/–∫–æ–Ω—Ç–∞–∫—Ç–∞–º
üü¢ –ë–ï–ó–û–ü–ê–°–ù–û: –¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ API ExteraGram

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{
  "status": "safe|warning|danger",
  "classification": "safe|potentially_unsafe|unsafe|critical", 
  "shortDescription": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª–æ–≤)",
  "issues": [{"type": "—Ç–∏–ø", "severity": "low|medium|high|critical", "description": "–æ–ø–∏—Å–∞–Ω–∏–µ", "recommendation": "—Ä–µ—à–µ–Ω–∏–µ"}]
}`;
	}

	private getPerformancePrompt(): string {
		return `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞–≥–∏–Ω–∞ ExteraGram –ö–†–ê–¢–ö–û.

–ò–©–ò:
üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã, —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ UI
üü° –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã O(n¬≤)+, –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–º—è—Ç—å
üü¢ –ù–û–†–ú–ê–õ–¨–ù–û: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –Ω–µ–±–æ–ª—å—à–∏–µ —Ü–∏–∫–ª—ã

–§–æ—Ä–º–∞—Ç:
{
  "status": "safe|warning|danger",
  "classification": "safe|potentially_unsafe|unsafe|critical",
  "shortDescription": "–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª–æ–≤)",
  "issues": [{"type": "—Ç–∏–ø", "severity": "low|medium|high|critical", "description": "–æ–ø–∏—Å–∞–Ω–∏–µ", "recommendation": "—Ä–µ—à–µ–Ω–∏–µ"}]
}`;
	}

	private getTextImprovementPrompt(textType: "description" | "changelog"): string {
		if (textType === "description") {
			return `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏–π –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è exteraGram. –£–ª—É—á—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞:

–¶–ï–õ–ò:
‚Ä¢ –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ª–æ–≥ –∏ –∂–∏–≤–æ–π —è–∑—ã–∫
‚Ä¢ –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å–ø–∏—Å–∫–æ–≤

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`;
		} else {
			return `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é changelog –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤ exteraGram. –£–ª—É—á—à–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π:

–¶–ï–õ–ò:
‚Ä¢ –°–¥–µ–ª–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä—É–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º: ‚ú® –ù–æ–≤–æ–µ, üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ª–æ–≥
‚Ä¢ –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
‚Ä¢ –°–¥–µ–ª–∞–π –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π changelog –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`;
		}
	}

	private getAICollectionPrompt(): string {
		return `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–ª–∞–≥–∏–Ω–∞–º –¥–ª—è Telegram –∏ exteraGram. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤.
–¢–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏ —Ç–µ–º–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∫–∏.

–¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è:
1.  **–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ —Ç–µ–º—É –ø–æ–¥–±–æ—Ä–∫–∏.** –ü–æ–π–º–∏, –∫–∞–∫–∏–µ –ø–ª–∞–≥–∏–Ω—ã –±—É–¥—É—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã.
2.  **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤.** –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–µ–≥–∏ –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞.
3.  **–í—ã–±–µ—Ä–∏ 8-12 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞–≥–∏–Ω–æ–≤.** –ù–µ –¥–æ–±–∞–≤–ª—è–π –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–¥–±–æ—Ä–∫–∞ –±—ã–ª–∞ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π.
4.  **–ü—Ä–∏–¥—É–º–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–±–æ—Ä–∫–∏**, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ç–µ–º–µ.
5.  **–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ, –Ω–æ —ë–º–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–±–æ—Ä–∫–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).** –û–Ω–æ –¥–æ–ª–∂–Ω–æ –æ–±—ä—è—Å–Ω—è—Ç—å, –ø–æ—á–µ–º—É —ç—Ç–∏ –ø–ª–∞–≥–∏–Ω—ã –≤–º–µ—Å—Ç–µ –∏ –∫–∞–∫—É—é –ø–æ–ª—å–∑—É –æ–Ω–∏ –ø—Ä–∏–Ω–µ—Å—É—Ç.
6.  **–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON.**

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞ –ø–ª–∞–≥–∏–Ω–æ–≤:
*   **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ç–µ–º–µ:** –ü–ª–∞–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–º–µ –ø–æ–¥–±–æ—Ä–∫–∏.
*   **–ö–∞—á–µ—Å—Ç–≤–æ –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å:** –û—Ç–¥–∞–≤–∞–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞–º —Å —Ö–æ—Ä–æ—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–≥—Ä—É–∑–æ–∫, –Ω–æ –Ω–µ –±–æ–π—Å—è –≤–∫–ª—é—á–∞—Ç—å –Ω–æ–≤—ã–µ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ.
*   **–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ:** –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫—É —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞ –∏–∑ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤.

–ó–ê–ü–†–ï–©–ï–ù–û:
*   –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–ª–∞–≥–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ.
*   –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –±–æ–ª–µ–µ 15 –∏–ª–∏ –º–µ–Ω–µ–µ 5 –ø–ª–∞–≥–∏–Ω–æ–≤.
*   –û—Ç–≤–µ—á–∞—Ç—å —á—Ç–æ-–ª–∏–±–æ, –∫—Ä–æ–º–µ JSON –æ–±—ä–µ–∫—Ç–∞.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ JSON):
{
	 "collectionName": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π –ø–æ–¥–±–æ—Ä–∫–∏",
	 "collectionDescription": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π –ø–æ–¥–±–æ—Ä–∫–∏.",
	 "pluginIds": [1, 2, 3, 4, 5, 6, 7, 8]
}`;
	}

	async generateAICollection(
		allPlugins: {
			id: number;
			name: string;
			shortDescription: string | null;
			category: string;
			tags: string | null;
			rating: number;
			downloadCount: number;
		}[],
		theme: string,
	): Promise<AICollectionResult> {
		console.log(
			`[PluginAIChecker] Starting AI collection generation for theme: "${theme}"`,
		);

		try {
			const messages = [
				new SystemMessage(this.getAICollectionPrompt()),
				new HumanMessage(`–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–¥–±–æ—Ä–∫—É –ø–ª–∞–≥–∏–Ω–æ–≤ –Ω–∞ —Ç–µ–º—É "${theme}".

–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤:
\`\`\`json
${JSON.stringify(allPlugins, null, 2)}
\`\`\`

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`),
			];

			console.log(
				`[PluginAIChecker] Sending collection generation request to Gemini`,
			);

			const startTime = Date.now();
			const response = await this.gemini.invoke(messages);
			const duration = Date.now() - startTime;

			console.log(
				`[PluginAIChecker] Received collection response in ${duration}ms`,
			);

			const content = response.content.toString();
			const jsonMatch = content.match(/\{[\s\S]*\}/);
			if (!jsonMatch) {
				throw new Error("No JSON found in AI response for collection");
			}

			const parsedJson = JSON.parse(jsonMatch[0]);
			const result = AICollectionResultSchema.parse(parsedJson);

			console.log(
				`[PluginAIChecker] Collection generation completed for theme "${theme}". Found ${result.pluginIds.length} plugins.`,
			);

			return result;
		} catch (error) {
			console.error(
				`[PluginAIChecker] Failed to generate AI collection for theme "${theme}":`,
				error,
			);
			throw new Error(
				`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫—É: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
			);
		}
	}

	async improveText(
		text: string,
		textType: "description" | "changelog",
		pluginName?: string,
	): Promise<{ improvedText: string }> {
		console.log(
			`[PluginAIChecker] Starting text improvement for ${textType}: ${text.length} characters`,
		);

		try {
			const messages = [
				new SystemMessage(this.getTextImprovementPrompt(textType)),
				new HumanMessage(`${pluginName ? `–ü–ª–∞–≥–∏–Ω: ${pluginName}\n\n` : ""}–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
${text}

–£–ª—É—á—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–π –µ–≥–æ –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`),
			];

			console.log(
				`[PluginAIChecker] Sending text improvement request to Gemini`,
			);

			const startTime = Date.now();
			const response = await this.gemini.invoke(messages);
			const duration = Date.now() - startTime;

			console.log(
				`[PluginAIChecker] Received text improvement response in ${duration}ms`,
			);

			const improvedText = response.content.toString().trim();

			console.log(
				`[PluginAIChecker] Text improvement completed: ${improvedText.length} characters`,
			);

			return {
				improvedText,
			};
		} catch (error) {
			console.error(
				`[PluginAIChecker] Failed to improve ${textType}:`,
				error,
			);
			throw new Error(
				`–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
			);
		}
	}

	private async mergeChunkResults(
		results: CheckResult[],
	): Promise<CheckResult> {
		console.log(
			`[PluginAIChecker] Merging results from ${results.length} chunks`,
		);

		if (results.length === 1) {
			console.log("[PluginAIChecker] Only one chunk, returning as-is");
			return results[0]!;
		}

		const allIssues = results.flatMap((r) => r.issues);
		const statuses = results.map((r) => r.status);

		console.log(
			`[PluginAIChecker] Individual statuses: ${statuses.join(", ")}`,
		);
		console.log(`[PluginAIChecker] Total issues found: ${allIssues.length}`);

		const classifications = results.map((r) => r.classification);
		let finalClassification: CheckResult["classification"] = "safe";
		if (classifications.includes("critical")) finalClassification = "critical";
		else if (classifications.includes("unsafe")) finalClassification = "unsafe";
		else if (classifications.includes("potentially_unsafe"))
			finalClassification = "potentially_unsafe";

		let finalStatus: CheckResult["status"] = "safe";
		if (statuses.includes("danger")) finalStatus = "danger";
		else if (statuses.includes("warning")) finalStatus = "warning";

		console.log(
			`[PluginAIChecker] Individual classifications: ${classifications.join(", ")}`,
		);
		console.log(
			`[PluginAIChecker] Final classification: ${finalClassification}`,
		);
		console.log(`[PluginAIChecker] Final status: ${finalStatus}`);

		const finalResult = {
			status: finalStatus,
			classification: finalClassification,
			shortDescription: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${results.length} —á–∞—Å—Ç–µ–π. ${allIssues.length} –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ.`,
			issues: allIssues.slice(0, 10),
		};

		console.log("[PluginAIChecker] Final merged result created");
		return finalResult;
	}

	async checkSecurity(
		pluginCode: string,
		pluginName: string,
	): Promise<{ score: number; details: CheckResult; issues: string[] }> {
		console.log(
			`[PluginAIChecker] Starting security check for plugin: ${pluginName}`,
		);

		try {
			const chunks = await this.splitLargeCode(pluginCode);
			const results: CheckResult[] = [];

			console.log(
				`[PluginAIChecker] Processing ${chunks.length} chunk(s) for security analysis`,
			);

			for (const [index, chunk] of chunks.entries()) {
				console.log(
					`[PluginAIChecker] Processing chunk ${index + 1}/${chunks.length} (${chunk.pageContent.length} chars)`,
				);

				const messages = [
					new SystemMessage(this.getSecurityPrompt()),
					new HumanMessage(`Plugin name: ${pluginName}
Part ${index + 1} of ${chunks.length}

Plugin code:
\`\`\`python
${chunk.pageContent}
\`\`\`

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ –∏ –≤–µ—Ä–Ω–∏ JSON –æ—Ç–≤–µ—Ç. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`),
				];

				console.log(
					`[PluginAIChecker] Sending request to Gemini for chunk ${index + 1}`,
				);
				console.log(
					`[PluginAIChecker] Message length: ${messages[1]?.content?.length} characters`,
				);

				const startTime = Date.now();
				const response = await this.gemini.invoke(messages);
				const duration = Date.now() - startTime;

				console.log(
					`[PluginAIChecker] Received response from Gemini in ${duration}ms`,
				);

				const content = response.content.toString();
				console.log(
					`[PluginAIChecker] Response length: ${content.length} characters`,
				);
				console.log(
					`[PluginAIChecker] Response preview: ${content.substring(0, 200)}...`,
				);

				try {
					const jsonMatch = content.match(/\{[\s\S]*\}/);
					if (!jsonMatch) {
						console.error("[PluginAIChecker] No JSON found in response");
						console.error("[PluginAIChecker] Full response:", content);
						throw new Error("No JSON found in response");
					}

					console.log(
						`[PluginAIChecker] Found JSON in response, length: ${jsonMatch[0].length} characters`,
					);
					console.log(
						`[PluginAIChecker] JSON preview: ${jsonMatch[0].substring(0, 300)}...`,
					);

					const parsedJson = JSON.parse(jsonMatch[0]);
					console.log(
						`[PluginAIChecker] Successfully parsed JSON for chunk ${index + 1}`,
					);

					const result = CheckResultSchema.parse(parsedJson);
					console.log(
						`[PluginAIChecker] Schema validation passed for chunk ${index + 1}`,
					);
					console.log(
						`[PluginAIChecker] Result: status=${result.status}, classification=${result.classification}, issues=${result.issues.length}`,
					);

					results.push(result);
				} catch (parseError) {
					console.error(
						`[PluginAIChecker] Failed to parse LLM response for chunk ${index + 1}:`,
						parseError,
					);
					console.error(
						"[PluginAIChecker] Raw response that failed to parse:",
						content,
					);

					results.push({
						status: "danger",
						classification: "critical",
						shortDescription: "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
						issues: [
							{
								type: "analysis_error",
								severity: "high",
								description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥",
								recommendation: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∂–µ",
							},
						],
					});
				}
			}

			console.log(
				`[PluginAIChecker] All chunks processed, merging results from ${results.length} chunks`,
			);
			const finalResult = await this.mergeChunkResults(results);

			console.log(
				`[PluginAIChecker] Security check completed for ${pluginName}`,
			);
			console.log(
				`[PluginAIChecker] Final result: status=${finalResult.status}, classification=${finalResult.classification}, issues=${finalResult.issues.length}`,
			);

			return {
				score:
					finalResult.status === "safe"
						? 90
						: finalResult.status === "warning"
							? 60
							: 20,
				details: finalResult,
				issues: finalResult.issues.map((i) => i.description),
			};
		} catch (error) {
			console.error(
				`[PluginAIChecker] Security check failed for ${pluginName}:`,
				error,
			);
			console.error(
				"[PluginAIChecker] Error stack:",
				error instanceof Error ? error.stack : "No stack trace",
			);

			return {
				score: 0,
				details: {
					status: "danger",
					classification: "critical",
					shortDescription: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
					issues: [
						{
							type: "system_error",
							severity: "critical",
							description:
								error instanceof Error ? error.message : "Unknown error",
							recommendation: "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
						},
					],
				},
				issues: ["–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"],
			};
		}
	}

	async checkPerformance(
		pluginCode: string,
		pluginName: string,
	): Promise<{ score: number; details: CheckResult; issues: string[] }> {
		console.log(
			`[PluginAIChecker] Starting performance check for plugin: ${pluginName}`,
		);

		try {
			const chunks = await this.splitLargeCode(pluginCode);
			const results: CheckResult[] = [];

			console.log(
				`[PluginAIChecker] Processing ${chunks.length} chunk(s) for performance analysis`,
			);

			for (const [index, chunk] of chunks.entries()) {
				console.log(
					`[PluginAIChecker] Processing performance chunk ${index + 1}/${chunks.length}`,
				);

				const messages = [
					new SystemMessage(this.getPerformancePrompt()),
					new HumanMessage(`Plugin name: ${pluginName}
Part ${index + 1} of ${chunks.length}

Plugin code:
\`\`\`python
${chunk.pageContent}
\`\`\`

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤–µ—Ä–Ω–∏ JSON –æ—Ç–≤–µ—Ç. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`),
				];

				const startTime = Date.now();
				const response = await this.gemini.invoke(messages);
				const duration = Date.now() - startTime;

				console.log(
					`[PluginAIChecker] Performance response received in ${duration}ms`,
				);

				const content = response.content.toString();

				try {
					const jsonMatch = content.match(/\{[\s\S]*\}/);
					if (!jsonMatch) {
						console.error(
							"[PluginAIChecker] No JSON found in performance response",
						);
						throw new Error("No JSON found in response");
					}

					const parsedJson = JSON.parse(jsonMatch[0]);
					const result = CheckResultSchema.parse(parsedJson);

					console.log(
						`[PluginAIChecker] Performance result: status=${result.status}, classification=${result.classification}`,
					);
					results.push(result);
				} catch (parseError) {
					console.error(
						`[PluginAIChecker] Failed to parse performance response for chunk ${index + 1}:`,
						parseError,
					);
					console.error(
						"[PluginAIChecker] Performance response content:",
						content,
					);

					results.push({
						status: "warning",
						classification: "potentially_unsafe",
						shortDescription: "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
						issues: [
							{
								type: "analysis_error",
								severity: "medium",
								description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
								recommendation: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∂–µ",
							},
						],
					});
				}
			}

			const finalResult = await this.mergeChunkResults(results);
			console.log(
				`[PluginAIChecker] Performance check completed: status=${finalResult.status}`,
			);

			return {
				score:
					finalResult.status === "safe"
						? 90
						: finalResult.status === "warning"
							? 60
							: 20,
				details: finalResult,
				issues: finalResult.issues.map((i) => i.description),
			};
		} catch (error) {
			console.error(
				`[PluginAIChecker] Performance check failed for ${pluginName}:`,
				error,
			);
			return {
				score: 0,
				details: {
					status: "warning",
					classification: "potentially_unsafe",
					shortDescription: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
					issues: [
						{
							type: "system_error",
							severity: "medium",
							description:
								error instanceof Error ? error.message : "Unknown error",
							recommendation: "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
						},
					],
				},
				issues: ["–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"],
			};
		}
	}

	cleanup() {
		console.log("[PluginAIChecker] Cleanup completed");
	}
}
